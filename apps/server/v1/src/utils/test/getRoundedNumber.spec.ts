// Generated by CodiumAI

import { describe, expect, test } from "bun:test";
import getRoundedNumber from "../getRoundedNumber";

describe("getRoundedNumber", () => {
  // Returns the rounded number to the nearest thousand when given a positive integer.
  test("should return the rounded number to the nearest thousand when given a positive integer", () => {
    expect(getRoundedNumber(1234)).toBe(1000);
    expect(getRoundedNumber(5678)).toBe(6000);
    expect(getRoundedNumber(9999)).toBe(10000);
  });

  // Returns the rounded number to the nearest thousand when given a negative integer.
  test("should return the rounded number to the nearest thousand when given a negative integer", () => {
    expect(getRoundedNumber(-1234)).toBe(-1000);
    expect(getRoundedNumber(-5678)).toBe(-6000);
    expect(getRoundedNumber(-9999)).toBe(-10000);
  });

  // Returns 0 when given 0.
  test("should return 0 when given 0", () => {
    expect(getRoundedNumber(0)).toBe(0);
  });

  // Returns NaN when given NaN.
  test("should return NaN when given NaN", () => {
    expect(getRoundedNumber(NaN)).toBeNaN();
  });
});
