// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id Int @id @default(autoincrement())
  provider_id Int @unique
  name String @unique
  email String?
  password String?
  picture String
  type UserType @default(User)
  bio String
  site_admin Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client_keys ClientKey?
  gallery Gallery?
  album Album[]
  subcription Subcription?
}

enum UserType {
  User 
  Admin
  Owner
}

model ClientKey {
  id Int @id @default(autoincrement())
  user_id Int @unique
  client_id String
  client_secret String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Gallery {
  id Int @id @default(autoincrement())
  user_id Int @unique
  pictures Picture[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Album {
  id Int @id @default(autoincrement())  
  title   String
  description   String
  pictures Picture[]
  user_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Picture {
  id Int @id @default(autoincrement())  
  title   String
  description   String
  url       String
  gallery_id Int
  album_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gallery   Gallery  @relation(fields: [gallery_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  alubm Album @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Subcription {
  id Int @id @default(autoincrement())  
  user_id Int @unique
  start_date DateTime? 
  end_date DateTime?
  status status @default(deactive)
  plan plan @default(none)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum plan {
  none
  Gold
  Diamond
  Netherite
}

enum status {
  deactive
  active
}
